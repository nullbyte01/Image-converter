@page "/"
@rendermode InteractiveWebAssembly
@inject IJSRuntime JsRuntime;

<PageTitle>Home</PageTitle>

<div class="container">
    <h1>Image Converter</h1>
    <div class="row">
        <div class="dashed-border p-5 mt-5 @HoverClass">
            <div class="flex-centered">
                <p>Drag and Drop file here</p>
                <p>Or</p>
                <InputFile class="btn btn-primary" @ondragenter="OnDragEnter"
                           @ondragleave="OnDragLeave" OnChange="@InputFileUploaded">Upload</InputFile>
            </div>
        </div>

        @if (canViewConvertScreen)
        {
            <div class="container p-3 my-3 bg-dark">
                <p class="convert-text">@FileName</p>
                <select id="get-file" name="get-file" disabled>
                    @if (convertFrom != null)
                    {
                        @foreach (var ext in convertFrom)
                        {
                            <option>@ext</option>
                        }
                    }
                </select>
                <p class="to">TO</p>
                <select id="post-file" name="post-file">

                    @if (convertTo != null)
                    {
                        @foreach (var ext in convertTo)
                        {
                            <option>@ext</option>
                        }
                    }
                </select>
                <button type="button" class="btn btn-success">Convert</button>
            </div>
        }

    </div>
</div>

<footer>
    <div class="container">
        <h4>How to Convert Images?</h4>
    </div>
</footer>

<p style="color:@(IsValidFile?"Green":"Red")">@Message</p>

@code {

    #region Properties

    private string Message = "";
    private bool IsValidFile = false;
    private string HoverClass = string.Empty;
    string outputFileName = string.Empty;
    public List<string> convertFrom { get; set; }
    public List<string> convertTo { get; set; }
    public bool canViewConvertScreen { get; set; } = false;
    public string FileName { get; set; }

    #endregion

    #region Methods

    private void InputFileUploaded(InputFileChangeEventArgs e)
    {
        canViewConvertScreen = false;

        if (e.File != null && e.FileCount > 0)
        {
            canViewConvertScreen = true;

            string extension = Path.GetExtension(e.File.Name).Replace(".", string.Empty);

            FileName = e.File.Name;

            convertFrom = new List<string>();
            convertFrom.AddRange(ValidFileHelper.fileTypesSupported.Where(file => file == extension.ToUpper()).ToList());

            convertTo = new List<string>();
            convertTo.AddRange(ValidFileHelper.fileTypesSupported);
            convertTo.Remove(extension.ToUpper());

            IsValidFile = ValidFileHelper.IsValid(extension);
        }
        else
        {
            Message = "Not Found";
        }
    }

    void OnDragEnter(DragEventArgs e)
    {
        HoverClass = "hover";
    }

    void OnDragLeave(DragEventArgs e)
    {
        HoverClass = string.Empty;
    }
    #endregion
}